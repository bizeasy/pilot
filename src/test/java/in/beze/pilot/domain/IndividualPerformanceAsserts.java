package in.beze.pilot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class IndividualPerformanceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividualPerformanceAllPropertiesEquals(IndividualPerformance expected, IndividualPerformance actual) {
        assertIndividualPerformanceAutoGeneratedPropertiesEquals(expected, actual);
        assertIndividualPerformanceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividualPerformanceAllUpdatablePropertiesEquals(
        IndividualPerformance expected,
        IndividualPerformance actual
    ) {
        assertIndividualPerformanceUpdatableFieldsEquals(expected, actual);
        assertIndividualPerformanceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividualPerformanceAutoGeneratedPropertiesEquals(
        IndividualPerformance expected,
        IndividualPerformance actual
    ) {
        assertThat(expected)
            .as("Verify IndividualPerformance auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividualPerformanceUpdatableFieldsEquals(IndividualPerformance expected, IndividualPerformance actual) {
        assertThat(expected)
            .as("Verify IndividualPerformance relevant properties")
            .satisfies(e -> assertThat(e.getCompletedTasks()).as("check completedTasks").isEqualTo(actual.getCompletedTasks()))
            .satisfies(e -> assertThat(e.getVelocity()).as("check velocity").isEqualTo(actual.getVelocity()))
            .satisfies(e ->
                assertThat(e.getStoryPointsCompleted()).as("check storyPointsCompleted").isEqualTo(actual.getStoryPointsCompleted())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividualPerformanceUpdatableRelationshipsEquals(
        IndividualPerformance expected,
        IndividualPerformance actual
    ) {
        assertThat(expected)
            .as("Verify IndividualPerformance relationships")
            .satisfies(e -> assertThat(e.getParty()).as("check party").isEqualTo(actual.getParty()))
            .satisfies(e -> assertThat(e.getSprint()).as("check sprint").isEqualTo(actual.getSprint()));
    }
}
