package in.beze.pilot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SprintAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintAllPropertiesEquals(Sprint expected, Sprint actual) {
        assertSprintAutoGeneratedPropertiesEquals(expected, actual);
        assertSprintAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintAllUpdatablePropertiesEquals(Sprint expected, Sprint actual) {
        assertSprintUpdatableFieldsEquals(expected, actual);
        assertSprintUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintAutoGeneratedPropertiesEquals(Sprint expected, Sprint actual) {
        assertThat(expected)
            .as("Verify Sprint auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintUpdatableFieldsEquals(Sprint expected, Sprint actual) {
        assertThat(expected)
            .as("Verify Sprint relevant properties")
            .satisfies(e -> assertThat(e.getName()).as("check name").isEqualTo(actual.getName()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getGoal()).as("check goal").isEqualTo(actual.getGoal()))
            .satisfies(e -> assertThat(e.getTotalPoints()).as("check totalPoints").isEqualTo(actual.getTotalPoints()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintUpdatableRelationshipsEquals(Sprint expected, Sprint actual) {
        assertThat(expected)
            .as("Verify Sprint relationships")
            .satisfies(e -> assertThat(e.getProject()).as("check project").isEqualTo(actual.getProject()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }
}
