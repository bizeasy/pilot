package in.beze.pilot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RetrospectiveAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRetrospectiveAllPropertiesEquals(Retrospective expected, Retrospective actual) {
        assertRetrospectiveAutoGeneratedPropertiesEquals(expected, actual);
        assertRetrospectiveAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRetrospectiveAllUpdatablePropertiesEquals(Retrospective expected, Retrospective actual) {
        assertRetrospectiveUpdatableFieldsEquals(expected, actual);
        assertRetrospectiveUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRetrospectiveAutoGeneratedPropertiesEquals(Retrospective expected, Retrospective actual) {
        assertThat(expected)
            .as("Verify Retrospective auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRetrospectiveUpdatableFieldsEquals(Retrospective expected, Retrospective actual) {
        assertThat(expected)
            .as("Verify Retrospective relevant properties")
            .satisfies(e -> assertThat(e.getSummary()).as("check summary").isEqualTo(actual.getSummary()))
            .satisfies(e -> assertThat(e.getActionItems()).as("check actionItems").isEqualTo(actual.getActionItems()))
            .satisfies(e -> assertThat(e.getDateCreated()).as("check dateCreated").isEqualTo(actual.getDateCreated()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRetrospectiveUpdatableRelationshipsEquals(Retrospective expected, Retrospective actual) {
        assertThat(expected)
            .as("Verify Retrospective relationships")
            .satisfies(e -> assertThat(e.getSprint()).as("check sprint").isEqualTo(actual.getSprint()));
    }
}
