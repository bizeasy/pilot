package in.beze.pilot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SprintTaskHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskHistoryAllPropertiesEquals(SprintTaskHistory expected, SprintTaskHistory actual) {
        assertSprintTaskHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertSprintTaskHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskHistoryAllUpdatablePropertiesEquals(SprintTaskHistory expected, SprintTaskHistory actual) {
        assertSprintTaskHistoryUpdatableFieldsEquals(expected, actual);
        assertSprintTaskHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskHistoryAutoGeneratedPropertiesEquals(SprintTaskHistory expected, SprintTaskHistory actual) {
        assertThat(expected)
            .as("Verify SprintTaskHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskHistoryUpdatableFieldsEquals(SprintTaskHistory expected, SprintTaskHistory actual) {
        assertThat(expected)
            .as("Verify SprintTaskHistory relevant properties")
            .satisfies(e -> assertThat(e.getComments()).as("check comments").isEqualTo(actual.getComments()))
            .satisfies(e -> assertThat(e.getFromDate()).as("check fromDate").isEqualTo(actual.getFromDate()))
            .satisfies(e -> assertThat(e.getToDate()).as("check toDate").isEqualTo(actual.getToDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskHistoryUpdatableRelationshipsEquals(SprintTaskHistory expected, SprintTaskHistory actual) {
        assertThat(expected)
            .as("Verify SprintTaskHistory relationships")
            .satisfies(e -> assertThat(e.getFromStatus()).as("check fromStatus").isEqualTo(actual.getFromStatus()))
            .satisfies(e -> assertThat(e.getToStatus()).as("check toStatus").isEqualTo(actual.getToStatus()));
    }
}
