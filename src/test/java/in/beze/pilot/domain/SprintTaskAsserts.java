package in.beze.pilot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SprintTaskAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskAllPropertiesEquals(SprintTask expected, SprintTask actual) {
        assertSprintTaskAutoGeneratedPropertiesEquals(expected, actual);
        assertSprintTaskAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskAllUpdatablePropertiesEquals(SprintTask expected, SprintTask actual) {
        assertSprintTaskUpdatableFieldsEquals(expected, actual);
        assertSprintTaskUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskAutoGeneratedPropertiesEquals(SprintTask expected, SprintTask actual) {
        assertThat(expected)
            .as("Verify SprintTask auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskUpdatableFieldsEquals(SprintTask expected, SprintTask actual) {
        assertThat(expected)
            .as("Verify SprintTask relevant properties")
            .satisfies(e -> assertThat(e.getSequenceNo()).as("check sequenceNo").isEqualTo(actual.getSequenceNo()))
            .satisfies(e -> assertThat(e.getStoryPoints()).as("check storyPoints").isEqualTo(actual.getStoryPoints()))
            .satisfies(e -> assertThat(e.getFromTime()).as("check fromTime").isEqualTo(actual.getFromTime()))
            .satisfies(e -> assertThat(e.getThruTime()).as("check thruTime").isEqualTo(actual.getThruTime()))
            .satisfies(e -> assertThat(e.getAssignedTime()).as("check assignedTime").isEqualTo(actual.getAssignedTime()))
            .satisfies(e -> assertThat(e.getDuration()).as("check duration").isEqualTo(actual.getDuration()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSprintTaskUpdatableRelationshipsEquals(SprintTask expected, SprintTask actual) {
        assertThat(expected)
            .as("Verify SprintTask relationships")
            .satisfies(e -> assertThat(e.getTask()).as("check task").isEqualTo(actual.getTask()))
            .satisfies(e -> assertThat(e.getSprint()).as("check sprint").isEqualTo(actual.getSprint()))
            .satisfies(e -> assertThat(e.getAssignedTo()).as("check assignedTo").isEqualTo(actual.getAssignedTo()))
            .satisfies(e -> assertThat(e.getAssignedBy()).as("check assignedBy").isEqualTo(actual.getAssignedBy()))
            .satisfies(e -> assertThat(e.getQa()).as("check qa").isEqualTo(actual.getQa()))
            .satisfies(e -> assertThat(e.getReviewedBy()).as("check reviewedBy").isEqualTo(actual.getReviewedBy()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }
}
