package in.beze.pilot.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PartyAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartyAllPropertiesEquals(Party expected, Party actual) {
        assertPartyAutoGeneratedPropertiesEquals(expected, actual);
        assertPartyAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartyAllUpdatablePropertiesEquals(Party expected, Party actual) {
        assertPartyUpdatableFieldsEquals(expected, actual);
        assertPartyUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartyAutoGeneratedPropertiesEquals(Party expected, Party actual) {
        assertThat(expected)
            .as("Verify Party auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartyUpdatableFieldsEquals(Party expected, Party actual) {
        assertThat(expected)
            .as("Verify Party relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getDisplayName()).as("check displayName").isEqualTo(actual.getDisplayName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getDob()).as("check dob").isEqualTo(actual.getDob()))
            .satisfies(e -> assertThat(e.getNotes()).as("check notes").isEqualTo(actual.getNotes()))
            .satisfies(e -> assertThat(e.getMobileNumber()).as("check mobileNumber").isEqualTo(actual.getMobileNumber()))
            .satisfies(e -> assertThat(e.getEmployeeId()).as("check employeeId").isEqualTo(actual.getEmployeeId()))
            .satisfies(e -> assertThat(e.getLogin()).as("check login").isEqualTo(actual.getLogin()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPartyUpdatableRelationshipsEquals(Party expected, Party actual) {
        assertThat(expected)
            .as("Verify Party relationships")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getPartyType()).as("check partyType").isEqualTo(actual.getPartyType()));
    }
}
